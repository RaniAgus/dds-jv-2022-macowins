@startuml
abstract class Venta {
  fecha: LocalDate
  getPrecioTotal(): BigDecimal
  esDeFecha(fecha): Boolean
  {abstract} aplicarRecargo(): BigDecimal
}

Venta "prendas" --> "*" PrendaVendida

note right of Venta::getPrecioTotal
  prendas.map(getPrecioTotal).sum() + aplicarRecargo()
end note

note right of Venta::esDeFecha
  Este método permite filtrar las
  ventas de un día determinado
end note

class VentaEnEfectivo extends Venta {
  aplicarRecargo()
}

class VentaConTarjeta extends Venta {
  cuotas
  coeficientePorCuota
  porcentajePorPrenda
  aplicarRecargo()
}

note as RecargoTarjeta
  cuotas * coeficientePorCuota
  + prendas.map(getPrecioTotal).sum() * porcentajePorPrenda
end note

VentaConTarjeta::aplicarRecargo .. RecargoTarjeta

class PrendaVendida {
  precio: BigDecimal
  cantidad: Integer
  getPrecioTotal(): BigDecimal
}

PrendaVendida --> Prenda

note right of PrendaVendida::precio
  Se guarda por separado el precio al momento
  de la venta, ya que el precio de la prenda
  puede sufrir modificaciones (ej: inflación)
end note

class Prenda {
  precioBase: BigDecimal
  getPrecio(): BigDecimal
}

Prenda --> Tipo
Prenda --> Estado

note right of Prenda::getPrecio
estado.modificarPrecioBase(precioBase)
end note

enum Tipo {
  SACO
  PANTALON
  CAMISA
}

interface Estado {
  modificarPrecioBase(precioBase): BigDecimal
}

class Nueva implements Estado {
  modificarPrecioBase(precioBase)
}

class Promocion implements Estado {
  descuento: BigDecimal
  modificarPrecioBase(precioBase)
}

class Liquidacion implements Estado {
  porcentaje: Integer
  modificarPrecioBase(precioBase)
}

note as LiquidacionCalculo
base * (1 - porcentaje / 100)
end note

Liquidacion .. LiquidacionCalculo

@enduml
