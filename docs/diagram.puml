@startuml
abstract class Venta {
  fecha
  getPrecioTotal()
  esDeFecha(fecha)
  {abstract} aplicarRecargo()
}

Venta "prendas" --> "*" PrendaVendida

note right of Venta::getPrecioTotal
  prendas.map(getPrecioTotal).sum() + aplicarRecargo
end note

note right of Venta::esDeFecha
  Este método permite filtrar las
  ventas de un día determinado
end note

class VentaEnEfectivo extends Venta {
  aplicarRecargo()
}

note as RecargoEfectivo
  Vale siempre cero
end note

VentaEnEfectivo .. RecargoEfectivo

class VentaConTarjeta extends Venta {
  cuotas
  coeficientePorCuota
  porcentajePorPrenda
  aplicarRecargo()
}

note as RecargoTarjeta
  cuotas * coeficientePorCuota + 
  prendas.map(getPrecioTotal).sum() * porcentajePorPrenda
end note

VentaConTarjeta .. RecargoTarjeta

class PrendaVendida {
  precio
  cantidad
  getPrecioTotal()
}

PrendaVendida "prenda" --> Prenda

note right of PrendaVendida::precio
  Es el precio al momento de la venta. 
  Se guarda por separado ya que el valor
  de prenda.getPrecio() puede sufrir 
  modificaciones a lo largo del tiempo.
end note

class Prenda {
  precioBase
  getPrecio()
}

Prenda "tipo" --> Tipo
Prenda "estado" --> Estado

note right of Prenda::getPrecio
  estado.modificarPrecioBase(precioBase)
end note

enum Tipo {
  SACO
  PANTALON
  CAMISA
}

interface Estado {
  modificarPrecioBase(precioBase)
}

class Nueva implements Estado {
  modificarPrecioBase(precioBase)
}

note as NuevaCalculo
precioBase
end note

Nueva .. NuevaCalculo

class Promocion implements Estado {
  descuento
  modificarPrecioBase(precioBase)
}

note as PromocionCalculo
precioBase - descuento
end note

Promocion .. PromocionCalculo

class Liquidacion implements Estado {
  porcentaje
  modificarPrecioBase(precioBase)
}

note as LiquidacionCalculo
precioBase * (1 - porcentaje / 100)
end note

Liquidacion .. LiquidacionCalculo

@enduml
