@startuml
abstract class Venta {
  fecha
  getPrecioTotal()
  esDeFecha(fecha)
  {abstract} aplicarRecargo()
}

Venta "prendas" --> "*" PrendaVendida

note right of Venta::getPrecioTotal
  Es la sumatoria de getPrecioTotal() de todas
  las prendas + aplicarRecargo()
end note

note right of Venta::esDeFecha
  Este método permite filtrar las
  ventas de un día determinado
end note

class VentaEnEfectivo extends Venta {
  aplicarRecargo()
}

class VentaConTarjeta extends Venta {
  cuotas
  coeficientePorCuota
  porcentajePorPrenda
  aplicarRecargo()
}

note as RecargoTarjeta
  Es el producto entre las cuotas y el 
  coeficientePorCuota + el producto entre la 
  sumatoria de getPrecioTotal() de todas las
  prendas y el porcentajePorPrenda
end note

VentaConTarjeta::aplicarRecargo .. RecargoTarjeta

class PrendaVendida {
  precio
  cantidad
  getPrecioTotal()
}

PrendaVendida --> Prenda

note right of PrendaVendida::precio
  Se guarda por separado el precio al momento
  de la venta, ya que el precio de la prenda
  puede sufrir modificaciones a lo largo del
  tiempo.
end note

class Prenda {
  precioBase
  getPrecio()
}

Prenda --> Tipo
Prenda --> Estado

note right of Prenda::getPrecio
estado.modificarPrecioBase(precioBase)
end note

enum Tipo {
  SACO
  PANTALON
  CAMISA
}

interface Estado {
  modificarPrecioBase(precioBase)
}

class Nueva implements Estado {
  modificarPrecioBase(precioBase)
}

class Promocion implements Estado {
  descuento
  modificarPrecioBase(precioBase)
}

note as PromocionCalculo
precioBase - descuento
end note

Promocion .. PromocionCalculo

class Liquidacion implements Estado {
  porcentaje
  modificarPrecioBase(precioBase)
}

note as LiquidacionCalculo
precioBase * (1 - porcentaje / 100)
end note

Liquidacion .. LiquidacionCalculo

@enduml
